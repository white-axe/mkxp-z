# I have no idea what I'm doing
name: Automatic Build

on:
  push:
    branches: ['dev', 'autobuild', 'libretro']
    paths-ignore: ['*.md', '*.json', '*.png']
  pull_request:
    branches: ['dev', 'autobuild', 'libretro']
    paths-ignore: ['*.md', '*.json', '*.png']
  workflow_dispatch:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
        name: Get Git commit hash
        with:
          length: 7

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: >-
            base-devel
            git
            ruby
            vim
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-autotools
            mingw-w64-x86_64-gcc

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            windows/build-mingw64
            windows/downloads
          key: win-${{ hashFiles('windows/Makefile') }}

      - name: Build all dependencies
        shell: msys2 {0}
        run: |
          cd windows
          make

      - name: Build exe
        shell: msys2 {0}
        run: |
          source windows/vars.sh
          meson setup build
          cd build
          ninja
          strip ./mkxp-z.exe

      - name: Prepare archive
        shell: msys2 {0}
        run: |
          mkdir build/artifact
          cd build/artifact
          cp /mingw64/bin/zlib1.dll .
          cp ../../windows/build-mingw64/bin/x64-msvcrt-ruby310.dll .
          cp -r ../../windows/build-mingw64/lib/ruby/3.1.0 .
          mv ./3.1.0 ./stdlib
          cp ../mkxp-z.exe .
          cp ../../mkxp.json .
          cp -r ../../scripts .
          cp ../../assets/LICENSE.mkxp-z-with-https.txt .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z.windows.${{github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name}}-${{steps.short-sha.outputs.sha}}
          path: build/artifact

  build-linux-native:
    name: Ubuntu 22.04 x86_64
    runs-on: ubuntu-22.04
    steps:
      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
        name: Get Git commit hash
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            linux/build-x86_64
            linux/downloads
          key: lin-x86_64-${{ hashFiles('linux/Makefile') }}

      - name: Install apt dependencies
        run: |
          sudo apt update
          sudo apt install git build-essential cmake ninja-build python3-pip autoconf automake libtool pkg-config ruby bison zlib1g-dev libbz2-dev xorg-dev libgl1-mesa-dev libasound2-dev libpulse-dev -y
          pip3 install meson

      - name: Build everything else
        run: |
          cd linux
          make

      - name: Build executable
        run: |
          source linux/vars.sh
          meson setup build --bindir=. --prefix=$GITHUB_WORKSPACE/build/local
          cd build
          ninja
          ninja install

      - name: Prepare archive
        run: |
          cd build/local
          cp -r ../../linux/build-x86_64/lib/ruby/3.1.0 .
          mv ./3.1.0 ./stdlib
          cp ../../mkxp.json .
          cp -r ../../scripts .
          cp ../../assets/LICENSE.mkxp-z-with-https.txt .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z.linux.x86_64.${{github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name}}-${{steps.short-sha.outputs.sha}}
          path: build/local

  build-linux-cross:
    name: Ubuntu 22.04 ${{matrix.arch_mkxpz}}
    runs-on: ubuntu-22.04
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch_mkxpz: armv6
            arch_debian: armhf
            arch_gcc: arm-linux-gnueabihf
            experimental: false
          - arch_mkxpz: armv7
            arch_debian: armhf
            arch_gcc: arm-linux-gnueabihf
            experimental: false
          - arch_mkxpz: armv7-neon
            arch_debian: armhf
            arch_gcc: arm-linux-gnueabihf
            experimental: false
          - arch_mkxpz: arm64
            arch_debian: arm64
            arch_gcc: aarch64-linux-gnu
            experimental: false
          - arch_mkxpz: power8le
            arch_debian: ppc64el
            arch_gcc: powerpc64le-linux-gnu
            experimental: false
          - arch_mkxpz: power9le
            arch_debian: ppc64el
            arch_gcc: powerpc64le-linux-gnu
            experimental: false
          - arch_mkxpz: s390x
            arch_debian: s390x
            arch_gcc: s390x-linux-gnu
            # src/util/serial-util.h errors on big-endian targets.
            experimental: true
          - arch_mkxpz: riscv64
            arch_debian: riscv64
            arch_gcc: riscv64-linux-gnu
            # libjxl/highway compatibility issue, TODO check if fixed in later SDL_image.
            # Also probably an OpenSSL arch name issue, which might be fixed by now.
            experimental: true
    steps:
      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
        name: Get Git commit hash
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            linux/build-${{matrix.arch_mkxpz}}
            linux/downloads
          key: lin-${{matrix.arch_mkxpz}}-${{ hashFiles('linux/Makefile', 'linux/target*', 'linux/toolchain*') }}

      - name: Install apt dependencies
        run: |
          sudo sed -i "s/deb /deb [arch=amd64] /g" /etc/apt/sources.list
          sudo dpkg --add-architecture ${{matrix.arch_debian}}
          echo "deb [arch=${{matrix.arch_debian}}] http://ports.ubuntu.com/ jammy main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{matrix.arch_debian}}] http://ports.ubuntu.com/ jammy-updates main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{matrix.arch_debian}}] http://ports.ubuntu.com/ jammy universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{matrix.arch_debian}}] http://ports.ubuntu.com/ jammy-updates universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{matrix.arch_debian}}] http://ports.ubuntu.com/ jammy multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{matrix.arch_debian}}] http://ports.ubuntu.com/ jammy-updates multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{matrix.arch_debian}}] http://ports.ubuntu.com/ jammy-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          sudo apt install git build-essential cmake ninja-build python3-pip autoconf automake libtool pkg-config ruby bison -y
          pip3 install meson
          sudo apt install libdmx-dev:${{matrix.arch_debian}} libfontenc-dev:${{matrix.arch_debian}} libfs-dev:${{matrix.arch_debian}} libice-dev:${{matrix.arch_debian}} libsm-dev:${{matrix.arch_debian}} libx11-dev:${{matrix.arch_debian}} libxau-dev:${{matrix.arch_debian}} libxaw7-dev:${{matrix.arch_debian}} libxcomposite-dev:${{matrix.arch_debian}} libxcursor-dev:${{matrix.arch_debian}} libxdamage-dev:${{matrix.arch_debian}} libxdmcp-dev:${{matrix.arch_debian}} libxext-dev:${{matrix.arch_debian}} libxfixes-dev:${{matrix.arch_debian}} libxfont-dev:${{matrix.arch_debian}} libxft-dev:${{matrix.arch_debian}} libxi-dev:${{matrix.arch_debian}} libxinerama-dev:${{matrix.arch_debian}} libxkbfile-dev:${{matrix.arch_debian}} libxmu-dev:${{matrix.arch_debian}} libxmuu-dev:${{matrix.arch_debian}} libxpm-dev:${{matrix.arch_debian}} libxrandr-dev:${{matrix.arch_debian}} libxrender-dev:${{matrix.arch_debian}} libxres-dev:${{matrix.arch_debian}} libxss-dev:${{matrix.arch_debian}} libxt-dev:${{matrix.arch_debian}} libxtst-dev:${{matrix.arch_debian}} libxv-dev:${{matrix.arch_debian}} libxvmc-dev:${{matrix.arch_debian}} libxxf86dga-dev:${{matrix.arch_debian}} libxxf86vm-dev:${{matrix.arch_debian}} x11proto-dev:${{matrix.arch_debian}} xserver-xorg-dev:${{matrix.arch_debian}} xtrans-dev:${{matrix.arch_debian}} -y
          sudo apt install gcc-${{matrix.arch_gcc}} g++-${{matrix.arch_gcc}} zlib1g-dev:${{matrix.arch_debian}} libbz2-dev:${{matrix.arch_debian}} libgl1-mesa-dev:${{matrix.arch_debian}} libasound2-dev:${{matrix.arch_debian}} libpulse-dev:${{matrix.arch_debian}} -y

      - name: Build everything else
        run: |
          cd linux
          source target-${{matrix.arch_mkxpz}}.sh
          make

      - name: Build executable
        run: |
          source linux/target-${{matrix.arch_mkxpz}}.sh
          source linux/vars.sh
          meson setup --cross-file linux/$ARCH_MESON_TOOLCHAIN build --bindir=. --prefix=$GITHUB_WORKSPACE/build/local
          cd build
          ninja
          ninja install
          cp "$MKXPZ_PREFIX/lib/$("$ARCH_CONFIGURE-objdump" -p local/mkxp-z* | grep -i NEEDED | grep -Eo 'libruby.so.[0-9\.]+')" local/lib*/
          cp "/usr/lib/$ARCH_CONFIGURE/$("$ARCH_CONFIGURE-objdump" -p local/lib*/libruby.so* | grep -i NEEDED | grep -Eo 'libcrypt.so.[0-9\.]+')" local/lib*/

      - name: Prepare archive
        run: |
          cd build/local
          cp -r ../../linux/build-${{matrix.arch_mkxpz}}/lib/ruby/3.1.0 .
          mv ./3.1.0 ./stdlib
          cp ../../mkxp.json .
          cp -r ../../scripts .
          cp ../../assets/LICENSE.mkxp-z-with-https.txt .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z.linux.${{matrix.arch_mkxpz}}.${{github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name}}-${{steps.short-sha.outputs.sha}}
          path: build/local

  build-macos:
    name: macOS
    runs-on: macos-latest
    steps:
      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
        name: Get Git commit hash
        with:
          length: 7

      - name: Remove pre-existing homebrew packages
        run: brew remove --force $(brew list)

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            macos/Dependencies/build-macosx-x86_64
            macos/Dependencies/build-macosx-arm64
            macos/Dependencies/build-macosx-universal
            macos/Dependencies/downloads
          key: mac-${{ hashFiles('macos/Dependencies/*.make', 'macos/Dependencies/*.sh') }}

      - name: Install Homebrew tools
        run: |
          cd macos/Dependencies
          brew bundle

      - name: Build all dependencies
        run: |
          cd macos/Dependencies
          ./setup.sh

      - name: Build app
        run: |
          cd macos
          xcodebuild -project mkxp-z.xcodeproj -configuration "Release" -scheme "Universal" -derivedDataPath "$GITHUB_WORKSPACE/build"

      - name: Compress app
        run: |
          cd build/Build/Products/Release
          cp ../../../../assets/LICENSE.mkxp-z-with-https.txt ./Z-universal.app/
          ditto -c -k --sequesterRsrc --keepParent Z-universal.app Z-universal.app.zip

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z.macos.${{github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name}}-${{steps.short-sha.outputs.sha}}
          path: build/Build/Products/Release/Z-universal.app.zip

  build-retro-phase1:
    name: LR phase 1
    runs-on: ubuntu-latest
    steps:
      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - id: cache
        name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            retro/build/retro-phase1
          key: retro-phase1-${{ hashFiles('retro/Makefile', 'retro/ruby-bindings.h', 'retro/sandbox-bindgen.rb') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          sudo apt install -y git curl build-essential automake libtool binaryen wabt zip universal-ctags

      - name: Set up WASI SDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -Lo ${{ runner.temp }}/wasi-sdk.tar.gz https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-21/wasi-sdk-21.0-linux.tar.gz
          mkdir ${{ runner.temp }}/wasi-sdk
          tar xzf ${{ runner.temp }}/wasi-sdk.tar.gz -C ${{ runner.temp }}/wasi-sdk --strip-components=1
          rm ${{ runner.temp }}/wasi-sdk.tar.gz

      - name: Build phase 1
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd retro
          CLICOLOR_FORCE=1 make -j $(nproc) WASI_SDK=${{ runner.temp }}/wasi-sdk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

  build-retro-windows:
    needs: build-retro-phase1
    name: LR Windows
    runs-on: windows-latest
    steps:
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: base-devel git mingw-w64-x86_64-gcc mingw-w64-x86_64-meson mingw-w64-x86_64-cmake

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Configure core
        shell: msys2 {0}
        run: |
          CLICOLOR_FORCE=1 meson setup build --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        shell: msys2 {0}
        run: |
          runner_temp="$(cygpath '${{ runner.temp }}')"
          mkdir "$runner_temp"/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          strip mkxp-z_libretro.dll
          mv mkxp-z_libretro.dll "$runner_temp"/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.windows.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ${{ runner.temp }}/retro-phase2

  build-retro-linux-gnu:
    needs: build-retro-phase1
    name: LR GNU/Linux ${{ matrix.arch_mkxpz }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch_mkxpz: armv6
            arch_debian: armhf
            arch_gcc: arm-linux-gnueabihf
          - arch_mkxpz: armv7
            arch_debian: armhf
            arch_gcc: arm-linux-gnueabihf
          - arch_mkxpz: armv7-neon
            arch_debian: armhf
            arch_gcc: arm-linux-gnueabihf
          - arch_mkxpz: arm64
            arch_debian: arm64
            arch_gcc: aarch64-linux-gnu
          - arch_mkxpz: power8le
            arch_debian: ppc64el
            arch_gcc: powerpc64le-linux-gnu
          - arch_mkxpz: power9le
            arch_debian: ppc64el
            arch_gcc: powerpc64le-linux-gnu
          - arch_mkxpz: riscv64
            arch_debian: riscv64
            arch_gcc: riscv64-linux-gnu
          - arch_mkxpz: s390x
            arch_debian: s390x
            arch_gcc: s390x-linux-gnu
          - arch_mkxpz: x86_64
            arch_debian: amd64
            arch_gcc: x86_64-linux-gnu
    steps:
      - name: Install dependencies
        run: |
          if [ '${{ matrix.arch_mkxpz }}' != 'x86_64' ]
          then
            codename=$(grep VERSION_CODENAME /etc/os-release | cut -f 2 -d '=')
            sudo sed -i 's/^Types: deb$/Types: deb\nArchitectures: amd64/g' /etc/apt/sources.list.d/ubuntu.sources
            sudo dpkg --add-architecture ${{ matrix.arch_debian }}
            echo 'Types: deb' | sudo tee -a /etc/apt/sources.list.d/ubuntu.sources
            echo "Architectures: ${{ matrix.arch_debian }}" | sudo tee -a /etc/apt/sources.list.d/ubuntu.sources
            echo 'URIs: http://ports.ubuntu.com/' | sudo tee -a /etc/apt/sources.list.d/ubuntu.sources
            echo "Suites: $codename $codename-updates" | sudo tee -a /etc/apt/sources.list.d/ubuntu.sources
            echo 'Components: main universe' | sudo tee -a /etc/apt/sources.list.d/ubuntu.sources
          fi
          sudo apt update
          sudo apt install -y git build-essential meson cmake
          if [ '${{ matrix.arch_mkxpz }}' != 'x86_64' ]
          then
            sudo apt install -y gcc-${{ matrix.arch_gcc }} g++-${{ matrix.arch_gcc }}
          fi

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Configure core
        run: |
          if [ '${{ matrix.arch_mkxpz }}' != 'x86_64' ]
          then
            cross_arg='--cross-file linux/meson-${{ matrix.arch_mkxpz }}.txt'
          else
            cross_arg=
          fi
          CLICOLOR_FORCE=1 meson setup build $cross_arg --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        run: |
          mkdir ${{ runner.temp }}/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          if [ '${{ matrix.arch_mkxpz }}' != 'x86_64' ]
          then
            ${{ matrix.arch_gcc }}-strip mkxp-z_libretro.so
          else
            strip mkxp-z_libretro.so
          fi
          mv mkxp-z_libretro.so ${{ runner.temp }}/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.linux-gnu.${{ matrix.arch_mkxpz }}.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ${{ runner.temp }}/retro-phase2

  build-retro-linux-musl:
    needs: build-retro-phase1
    name: LR Alpine Linux ${{ matrix.arch_mkxpz }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch_mkxpz: armv6
            arch_alpine: armhf
            arch_llvm: armv6-alpine-linux-musleabihf
            cpu_family: arm
            cpu: generic-armv6zk+vfpv2
            endian: little
          - arch_mkxpz: armv7
            arch_alpine: armv7
            arch_llvm: armv7-alpine-linux-musleabihf
            cpu_family: arm
            cpu: generic-armv7-a+vfpv3-d16
            endian: little
          - arch_mkxpz: armv7-neon
            arch_alpine: armv7
            arch_llvm: armv7-alpine-linux-musleabihf
            cpu_family: arm
            cpu: generic-armv7-a+neon
            endian: little
          - arch_mkxpz: arm64
            arch_alpine: aarch64
            arch_llvm: aarch64-alpine-linux-musl
            cpu_family: aarch64
            cpu: generic-armv8-a
            endian: little
          - arch_mkxpz: loongarch64
            arch_alpine: loongarch64
            arch_llvm: loongarch64-alpine-linux-musl
            cpu_family: loongarch64
            cpu: 3a5000
            endian: little
          - arch_mkxpz: power8le
            arch_alpine: ppc64le
            arch_llvm: powerpc64le-alpine-linux-musl
            cpu_family: ppc64
            cpu: power8
            endian: little
          - arch_mkxpz: power9le
            arch_alpine: ppc64le
            arch_llvm: powerpc64le-alpine-linux-musl
            cpu_family: ppc64
            cpu: power9
            endian: little
          - arch_mkxpz: riscv64
            arch_alpine: riscv64
            arch_llvm: riscv64-alpine-linux-musl
            cpu_family: riscv64
            cpu: rv64gc
            endian: little
          - arch_mkxpz: s390x
            arch_alpine: s390x
            arch_llvm: s390x-alpine-linux-musl
            cpu_family: s390x
            cpu: z196
            endian: big
          - arch_mkxpz: x86_64
            arch_alpine: x86_64
            arch_llvm: x86_64-alpine-linux-musl
            cpu_family: x86_64
            cpu: x86_64
            endian: little
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git build-essential clang llvm meson cmake

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Set up sysroot
        id: sysroot
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ matrix.arch_alpine }}
          branch: latest-stable
          packages: build-base

      - name: Configure core
        run: |
          echo "[binaries]" | tee -a ${{ runner.temp }}/cross.ini
          echo "c = ['clang', '--target=${{ matrix.arch_llvm }}', '--sysroot=${{ steps.sysroot.outputs.root-path }}']" | tee -a ${{ runner.temp }}/cross.ini
          echo "c_ld = 'lld'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpp = ['clang++', '--target=${{ matrix.arch_llvm }}', '--sysroot=${{ steps.sysroot.outputs.root-path }}']" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpp_ld = 'lld'" | tee -a ${{ runner.temp }}/cross.ini
          echo "ar = 'llvm-ar'" | tee -a ${{ runner.temp }}/cross.ini
          echo "strip = 'llvm-strip'" | tee -a ${{ runner.temp }}/cross.ini
          echo "[host_machine]" | tee -a ${{ runner.temp }}/cross.ini
          echo "system = 'linux'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpu_family = '${{ matrix.cpu_family }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpu = '${{ matrix.cpu }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo "endian = '${{ matrix.endian }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo "[properties]" | tee -a ${{ runner.temp }}/cross.ini
          echo "sys_root = '${{ steps.sysroot.outputs.root-path }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo "[cmake]" | tee -a ${{ runner.temp }}/cross.ini
          echo "CMAKE_EXE_LINKER_FLAGS_INIT = '-fuse-ld=lld'" | tee -a ${{ runner.temp }}/cross.ini
          echo "CMAKE_MODULE_LINKER_FLAGS_INIT = '-fuse-ld=lld'" | tee -a ${{ runner.temp }}/cross.ini
          echo "CMAKE_SHARED_LINKER_FLAGS_INIT = '-fuse-ld=lld'" | tee -a ${{ runner.temp }}/cross.ini
          echo "CMAKE_STATIC_LINKER_FLAGS_INIT = '-fuse-ld=lld'" | tee -a ${{ runner.temp }}/cross.ini
          echo '--------------------------------------------------------------------------------'
          CLICOLOR_FORCE=1 meson setup build --cross-file ${{ runner.temp }}/cross.ini --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        run: |
          mkdir ${{ runner.temp }}/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          llvm-strip mkxp-z_libretro.so
          mv mkxp-z_libretro.so ${{ runner.temp }}/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.linux-musl.${{ matrix.arch_mkxpz }}.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ${{ runner.temp }}/retro-phase2

  build-retro-android:
    needs: build-retro-phase1
    name: LR Android ${{ matrix.arch_mkxpz }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch_mkxpz: armv7
            arch_llvm: armv7a-linux-androideabi24 # 32-bit builds are broken with Android API versions older than 24; see https://github.com/android/ndk/issues/442
            arch_cmake: armv7-a
            cpu_family: arm
            cpu: generic-armv7-a
            endian: little
          - arch_mkxpz: arm64
            arch_llvm: aarch64-linux-android21
            arch_cmake: aarch64
            cpu_family: aarch64
            cpu: generic-armv8-a
            endian: little
          - arch_mkxpz: x86
            arch_llvm: i686-linux-android24 # 32-bit builds are broken with Android API versions older than 24; see https://github.com/android/ndk/issues/442
            arch_cmake: i686
            cpu_family: x86
            cpu: i686
            endian: little
          - arch_mkxpz: x86_64
            arch_llvm: x86_64-linux-android21
            arch_cmake: x86_64
            cpu_family: x86_64
            cpu: x86_64
            endian: little
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git build-essential llvm meson cmake

      - id: ndk
        name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          add-to-path: false

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Configure core
        run: |
          echo "[binaries]" | tee -a ${{ runner.temp }}/cross.ini
          echo "c = '${{ steps.ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.arch_llvm }}-clang'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpp = '${{ steps.ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.arch_llvm }}-clang++'" | tee -a ${{ runner.temp }}/cross.ini
          echo "ar = '${{ steps.ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar'" | tee -a ${{ runner.temp }}/cross.ini
          echo "strip = 'llvm-strip'" | tee -a ${{ runner.temp }}/cross.ini
          echo "[host_machine]" | tee -a ${{ runner.temp }}/cross.ini
          echo "system = 'android'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpu_family = '${{ matrix.cpu_family }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpu = '${{ matrix.cpu }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo "endian = '${{ matrix.endian }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo "[cmake]" | tee -a ${{ runner.temp }}/cross.ini
          echo "CMAKE_SYSTEM_PROCESSOR = '${{ matrix.arch_cmake }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo '--------------------------------------------------------------------------------'
          ANDROID_NDK=${{ steps.ndk.outputs.ndk-path }} CLICOLOR_FORCE=1 meson setup build --cross-file ${{ runner.temp }}/cross.ini --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        run: |
          mkdir ${{ runner.temp }}/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          llvm-strip mkxp-z_libretro.so
          mv mkxp-z_libretro.so ${{ runner.temp }}/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.android.${{ matrix.arch_mkxpz }}.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ${{ runner.temp }}/retro-phase2

  build-retro-darwin:
    needs: build-retro-phase1
    name: LR Darwin ${{ matrix.arch_mkxpz }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch_mkxpz: arm64
            arch_llvm: aarch64-apple-darwin
            cpu_family: aarch64
            cpu: generic-armv8-a
            endian: little
          - arch_mkxpz: x86_64
            arch_llvm: x86_64-apple-darwin
            cpu_family: x86_64
            cpu: x86_64
            endian: little
    steps:
      - name: Install dependencies
        run: |
          brew install -q git meson cmake

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Configure core
        run: |
          echo "[binaries]" | tee -a ${{ runner.temp }}/cross.ini
          echo "c = ['clang', '--target=${{ matrix.arch_llvm }}']" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpp = ['clang++', '--target=${{ matrix.arch_llvm }}']" | tee -a ${{ runner.temp }}/cross.ini
          echo "ar = 'ar'" | tee -a ${{ runner.temp }}/cross.ini
          echo "strip = 'strip'" | tee -a ${{ runner.temp }}/cross.ini
          echo "[host_machine]" | tee -a ${{ runner.temp }}/cross.ini
          echo "system = 'darwin'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpu_family = '${{ matrix.cpu_family }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpu = '${{ matrix.cpu }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo "endian = '${{ matrix.endian }}'" | tee -a ${{ runner.temp }}/cross.ini
          echo '--------------------------------------------------------------------------------'
          CLICOLOR_FORCE=1 meson setup build --cross-file ${{ runner.temp }}/cross.ini --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        run: |
          mkdir ${{ runner.temp }}/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          strip -x mkxp-z_libretro.dylib
          mv mkxp-z_libretro.dylib ${{ runner.temp }}/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.darwin.${{ matrix.arch_mkxpz }}.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ${{ runner.temp }}/retro-phase2

  build-retro-emscripten:
    needs: build-retro-phase1
    name: LR Emscripten
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y git build-essential meson cmake

      - name: Set up Emscripten SDK
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.46

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Configure core
        run: |
          echo "[binaries]" | tee -a ${{ runner.temp }}/cross.ini
          echo "c = 'emcc'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpp = 'em++'" | tee -a ${{ runner.temp }}/cross.ini
          echo "ar = 'emar'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cmake = ['emcmake', 'cmake']" | tee -a ${{ runner.temp }}/cross.ini
          echo "[host_machine]" | tee -a ${{ runner.temp }}/cross.ini
          echo "system = 'emscripten'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpu_family = 'wasm32'" | tee -a ${{ runner.temp }}/cross.ini
          echo "cpu = 'wasm32'" | tee -a ${{ runner.temp }}/cross.ini
          echo "endian = 'little'" | tee -a ${{ runner.temp }}/cross.ini
          echo '--------------------------------------------------------------------------------'
          CLICOLOR_FORCE=1 meson setup build --cross-file ${{ runner.temp }}/cross.ini --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        run: |
          mkdir ${{ runner.temp }}/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          mv mkxp-z_libretro.bc ${{ runner.temp }}

      - name: Build RetroArch
        run: |
          cd ${{ runner.temp }}
          git clone https://github.com/libretro/RetroArch retroarch --depth 1 -b $(curl -s https://api.github.com/repos/libretro/RetroArch/releases/latest | jq -r '.tag_name')
          mv mkxp-z_libretro.bc retroarch/libretro_emscripten.bc
          cd retroarch
          CLICOLOR_FORCE=1 emmake make -f Makefile.emscripten LIBRETRO=mkxp-z
          mv mkxp-z_libretro.wasm ${{ runner.temp }}/retro-phase2
          mv mkxp-z_libretro.js ${{ runner.temp }}/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.emscripten.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ${{ runner.temp }}/retro-phase2

  build-retro-3ds:
    needs: build-retro-phase1
    name: LR Nintendo 3DS
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm:latest
    steps:
      - name: Install dependencies
        run: |
          apt update
          apt install -y git build-essential pip ninja-build
          apt remove -y meson cmake
          pip install meson cmake

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Configure core
        run: |
          echo "[binaries]" | tee -a ~/cross.ini
          echo "c = '/opt/devkitpro/devkitARM/bin/arm-none-eabi-gcc'" | tee -a ~/cross.ini
          echo "cpp = '/opt/devkitpro/devkitARM/bin/arm-none-eabi-g++'" | tee -a ~/cross.ini
          echo "ar = '/opt/devkitpro/devkitARM/bin/arm-none-eabi-ar'" | tee -a ~/cross.ini
          echo "[host_machine]" | tee -a ~/cross.ini
          echo "system = 'bare'" | tee -a ~/cross.ini
          echo "cpu_family = 'arm'" | tee -a ~/cross.ini
          echo "cpu = 'arm11mpcore'" | tee -a ~/cross.ini
          echo "endian = 'little'" | tee -a ~/cross.ini
          echo '--------------------------------------------------------------------------------'
          git config --global --add safe.directory "$(pwd)"
          CLICOLOR_FORCE=1 meson setup build --cross-file ~/cross.ini --default-library static --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        run: |
          mkdir ~/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          mv mkxp-z_libretro.a ~/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.3ds.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ~/retro-phase2

  build-retro-vita:
    needs: build-retro-phase1
    name: LR PlayStation Vita
    runs-on: ubuntu-latest
    container: vitasdk/vitasdk:latest
    steps:
      - name: Install dependencies
        run: |
          apk update
          apk add git build-base meson cmake

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Configure core
        run: |
          echo "[binaries]" | tee -a ~/cross.ini
          echo "c = 'arm-vita-eabi-gcc'" | tee -a ~/cross.ini
          echo "cpp = 'arm-vita-eabi-g++'" | tee -a ~/cross.ini
          echo "ar = 'arm-vita-eabi-ar'" | tee -a ~/cross.ini
          echo "[host_machine]" | tee -a ~/cross.ini
          echo "system = 'bare'" | tee -a ~/cross.ini
          echo "cpu_family = 'arm'" | tee -a ~/cross.ini
          echo "cpu = 'cortex-a9'" | tee -a ~/cross.ini
          echo "endian = 'little'" | tee -a ~/cross.ini
          echo '--------------------------------------------------------------------------------'
          git config --global --add safe.directory "$(pwd)"
          CLICOLOR_FORCE=1 meson setup build --cross-file ~/cross.ini --default-library static -Db_staticpic=false --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        run: |
          mkdir ~/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          mv mkxp-z_libretro.a ~/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.vita.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ~/retro-phase2

  build-retro-wiiu:
    needs: build-retro-phase1
    name: LR Wii U
    runs-on: ubuntu-latest
    container: devkitpro/devkitppc:latest
    steps:
      - name: Install dependencies
        run: |
          apt update
          apt install -y git build-essential pip ninja-build
          apt remove -y meson cmake
          pip install meson cmake

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Configure core
        run: |
          echo "[binaries]" | tee -a ~/cross.ini
          echo "c = '/opt/devkitpro/devkitPPC/bin/powerpc-eabi-gcc'" | tee -a ~/cross.ini
          echo "cpp = '/opt/devkitpro/devkitPPC/bin/powerpc-eabi-g++'" | tee -a ~/cross.ini
          echo "ar = '/opt/devkitpro/devkitPPC/bin/powerpc-eabi-ar'" | tee -a ~/cross.ini
          echo "[host_machine]" | tee -a ~/cross.ini
          echo "system = 'bare'" | tee -a ~/cross.ini
          echo "cpu_family = 'ppc'" | tee -a ~/cross.ini
          echo "cpu = 'ppc750'" | tee -a ~/cross.ini
          echo "endian = 'big'" | tee -a ~/cross.ini
          echo '--------------------------------------------------------------------------------'
          git config --global --add safe.directory "$(pwd)"
          CLICOLOR_FORCE=1 meson setup build --cross-file ~/cross.ini --default-library static --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        run: |
          mkdir ~/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          mv mkxp-z_libretro.a ~/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.wiiu.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ~/retro-phase2

  build-retro-switch:
    needs: build-retro-phase1
    name: LR Nintendo Switch
    runs-on: ubuntu-latest
    container: devkitpro/devkita64:latest
    steps:
      - name: Install dependencies
        run: |
          apt update
          apt install -y git build-essential pip ninja-build
          apt remove -y meson cmake
          pip install meson cmake

      - id: short-sha
        name: Get Git commit hash
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download phase 1
        uses: actions/download-artifact@v4
        with:
          name: retro-phase1.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: retro/build/retro-phase1

      - name: Configure core
        run: |
          echo "[binaries]" | tee -a ~/cross.ini
          echo "c = '/opt/devkitpro/devkitA64/bin/aarch64-none-elf-gcc'" | tee -a ~/cross.ini
          echo "cpp = '/opt/devkitpro/devkitA64/bin/aarch64-none-elf-g++'" | tee -a ~/cross.ini
          echo "ar = '/opt/devkitpro/devkitA64/bin/aarch64-none-elf-ar'" | tee -a ~/cross.ini
          echo "[host_machine]" | tee -a ~/cross.ini
          echo "system = 'bare'" | tee -a ~/cross.ini
          echo "cpu_family = 'aarch64'" | tee -a ~/cross.ini
          echo "cpu = 'cortex-a57'" | tee -a ~/cross.ini
          echo "endian = 'little'" | tee -a ~/cross.ini
          echo '--------------------------------------------------------------------------------'
          git config --global --add safe.directory "$(pwd)"
          CLICOLOR_FORCE=1 meson setup build --cross-file ~/cross.ini --default-library static --buildtype release -Db_lto=true -Dretro=true -Dretro_phase1_path=retro/build/retro-phase1

      - name: Build core
        run: |
          mkdir ~/retro-phase2
          cd build
          CLICOLOR_FORCE=1 ninja -v
          mv mkxp-z_libretro.a ~/retro-phase2

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkxp-z_libretro.switch.${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}-${{ steps.short-sha.outputs.sha }}
          path: ~/retro-phase2
